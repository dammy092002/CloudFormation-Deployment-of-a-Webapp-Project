Type: AWS::EC2::VPC
Properties: 
  CidrBlock: !Ref
  EnableDnsHostnames: true
  Tags: 



Type: AWS::EC2::InternetGateway
Properties: 
  Tags: 
    - Tag


Parameters:
  Environmentname:
    Description: An Environment name that will be prefixed to Resources
    Type: String
  MyVPCcidr:
    Description: Please enter the IP range for this VPC
    Type: String
Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref MyVPCcidr
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref Environmentname
  MyInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties: 
    Tags:
        - Key: Name
          Value: !Ref Environmentname
  MyInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
    InternetGatewayId: String
    VpcId: String
    VpnGatewayId: String

MyPublicSubnet1
Type: AWS::EC2::Subnet
Properties:
  VpcId: String  
  AvailabilityZone: String
  CidrBlock: String
  MapPublicIpOnLaunch: Boolean
  Tags: 
    - Tag
  

MyPublicSubnet2
Type: AWS::EC2::Subnet
Properties: 
  VpcId: String
  AvailabilityZone: String
  CidrBlock: String
  MapPublicIpOnLaunch: Boolean
  Tags: 
    - Tag


MyPrivateSubnet1
Type: AWS::EC2::Subnet
Properties: 
  VpcId: String
  AvailabilityZone: String
  CidrBlock: String
  MapPublicIpOnLaunch: Boolean
  Tags: 
    - Tag


MyPrivateSubnet2
Type: AWS::EC2::Subnet
Properties: 
  VpcId: String
  AvailabilityZone: String
  CidrBlock: String
  MapPublicIpOnLaunch: Boolean
  Tags: 
    - Tag

Natgateway1EIP:
   Type: AWS::EC2::EIP
   DependsOn: VPCGatewayAttach
   Properties:
      Domain: vpc

Natgateway2EIP:
   Type: AWS::EC2::EIP
   DependsOn: VPCGatewayAttach
   Properties:
      Domain: vpc

Natgateway1
Type: AWS::EC2::NatGateway
Properties: 
  AllocationId: String
  SubnetId: String
Natgateway2
Type: AWS::EC2::NatGateway
Properties: 
  AllocationId: String
  SubnetId: String

PublicRouteTable
Type: AWS::EC2::RouteTable
Properties: 
  VpcId: !Ref MyV..
  Tags: 
    - Key: Name
      Value: !Sub ${Environment..} Public R..

DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: Gffff
    Properties:
       RouteTableId: !Ref Public...
       DestinationCidrBlock: 0.0.0.0/0
       GatewayId: !Ref ....

PublicSubnet1RouteTableAssociation  
Type: AWS::EC2::SubnetRouteTableAssociation
Properties: 
  RouteTableId: String
  SubnetId: String
PublicSubnet2RouteTableAssociation  
Type: AWS::EC2::SubnetRouteTableAssociation
Properties: 
  RouteTableId: String
  SubnetId: String

PrivateRouteTable1
Type: AWS::EC2::RouteTable
Properties: 
  VpcId: !Ref MyV..
  Tags: 
    - Key: Name
      Value: !Sub ${Environment..} Private Routes (AZ1)
DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
       RouteTableId: !Ref Priva...
       DestinationCidrBlock: 0.0.0.0/0
       GatewayId: !Ref NatGa
PrivateSubnet1RouteTableAssociation  
Type: AWS::EC2::SubnetRouteTableAssociation
Properties: 
  RouteTableId: !Ref Priva...
  SubnetId: !Ref PrivateSub

Outputs:
  MyVPC:
    Description: The ID of the VPC
    Value: !Ref MyVPC
    Export:
      Name: !Sub ${Environmentna}-VPCID

LBSecGroup:
  Type: AWS::EC2::SecurityGroup
  Properties:
      GroupDescription: Allow http to the load balancer
      VpcId:
         Fn::ImportValue:
	   !Sub "${Environmentname}-VPCID"	
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: 0.0.0.0/0

WebServerSecGroup:
  Type: AWS::EC2::SecurityGroup
  Properties:
      GroupDescription: Allow http and SSH to our hosts 
      VpcId:
         Fn::ImportValue:
	   !Sub "${Environmentname}-VPCID"	
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0

==
MyS3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      AccessControl: PublicRead
      BucketName: "udacity-mydemo-112"
===

AWSTemplateFormatVersion: '2010-09-09'
Resources:
  WebAppRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
  RolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: root
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action: "*"
          Resource: "*"
      Roles:
      - Ref: WebAppRole
  WebAppInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: WebAppRole


WebAppLaunchConfig:
Type: AWS::AutoScaling::LaunchConfiguration
Properties: 
  IamInstanceProfile: 
	- Ref: WebAppInstanceProfile
  ImageId: ami-000b2efc63395ae03
  InstanceType: t2.micro
  KeyName: myoregonkey
  SecurityGroups: 
    - Ref: WebServerSecGroup
  BlockDeviceMappings: 
    - DeviceName: "/dev/sdk"
      Ebs: 
        VolumeSize: '10'
  UserData:
     Fn::Base64: !Sub |
          #!/bin/bash
	sudo apt-get update -y
	sudo apt-get install unzip awscli -y
	sudo apt-get install apache2 -y
	sudo systemctl start apache2.service
	sudo chown ubuntu:ubuntu /var/www/html/
	cd /var/www/html
	aws s3 cp s3://udacity-bucket-111/udacity.zip .
	sudo unzip -o udacity.zip
  
WebAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "${Environmentname}-PRIV-NETS"
      LaunchConfigurationName:
	- Ref: WebAppLaunchConfig
      MinSize: '2'
      MaxSize: '5'
      HealthCheckGracePeriod: 300
      TargetGroupARNs: 
      - Ref: WebAppTargetGroup

WebAppLB
Type: AWS::ElasticLoadBalancingV2::LoadBalancer
Properties: 
   Subnets: 
   - Fn::ImportValue: !Sub "${Environmentname}-PUB1-SN"
   - Fn::ImportValue: !Sub "${Environmentname}-PUB2-SN"
   SecurityGroups: 
   - Ref: LBSecGroup

Listener:
   Type: "AWS::ElasticLoadBalancingV2::Listener"
   Properties:
     DefaultActions:
       - Type: "forwaard"
	 TargetGroupArn: 
	    Ref: WebAppTargetGroup
     LoadBalancerArn: 
	    Ref: WebAppLB
     Port: 80
     Protocol: "HTTP"



  LBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref WebAppTargetGroup
      Conditions:
        - Field: path-pattern
            Values: [/]
      ListenerArn: !Ref 'Listener'
      Priority: 1



WebAppTargetGroup
Type: AWS::ElasticLoadBalancingV2::TargetGroup
Properties: 
  HealthCheckIntervalSeconds: 10
  HealthCheckPath: /
  HealthCheckPort: String
  HealthCheckProtocol: HTTP
  HealthCheckTimeoutSeconds: 8
  HealthyThresholdCount: 3
  Port: 8080
  Protocol: HTTP
  UnhealthyThresholdCount: 5
  VpcId: 
    Fn::ImportValue:
       Fn::Sub: "${Environmentname}-VPCID"



      







Outputs: 
  #Bonus points for useful outputs!